<?xml version='1.0'?>
<project 
  xmlns:artifact="antlib:org.apache.maven.artifact.ant"
  xmlns:cm="antlib:net.lshift.cm"
  default="compile" basedir=".">

  <property environment="env"/>
  <property name="config" value="debug"/>
  <property name="cm.module" value="java"/>
  <property name="cm.vendor" value="lshift.net"/>

  <property name="cm.version" value="v2_0_6"/>
  <property name="public.version" value="2.0.6"/>

  <property name="build.home" value="build"/>
  <property name="doc.home" value="${build.home}/doc"/>

  <property name="compile.out" value="${build.home}/classes"/>

  <property name="dist.home" value="dist"/>
  <property name="web.home" value="web"/>
  <property name="src.home" value="src"/>

  <property name="test.src.home" value="test/src"/>
  <property name="test.compile.out" value="${build.home}/test/classes"/>

  <target name="build.properties">
    <ant antfile="use.xml"/>
    <property file="build.properties"/>
    <path id="test.compile.classpath">
      <pathelement path="${junit.home}/junit.jar"/>
    </path>
  </target>


  <!-- ==================================================================== -->

  <target name="init" depends="build.properties"/>

  <!-- ==================================================================== -->

  <target name="compile" depends="build"/>

  <!-- ==================================================================== -->

  <target name="build" depends="init">
    <property file="config/${config}/build.properties"/>

    <mkdir dir="${build.home}"/>
    <mkdir dir="${compile.out}"/>
    <path id="compile.classpath"/>

    <javac
      srcdir="${src.home}"
      destdir="${compile.out}"
      debug="${javac.debug}"
      deprecation="${javac.deprecation}"
      optimize="${javac.optimize}"
      target="${javac.target}">

      <classpath refid="compile.classpath"/>
    </javac>

    <rmic base="${compile.out}">
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement path="${compile.out}"/>
      </classpath>
      <include name="net/lshift/java/rmi/server/*Server.class"/>
    </rmic>

    <!-- class loaders don't generally allow you to get .class files
         as resources, and Linker needs this file at run time,
         so it gets renamed.
         -->
    <copy file="${compile.out}/net/lshift/java/linker/Loader.class"
      tofile="${compile.out}/net/lshift/java/linker/Loader.bin"/>

    <copy todir="${compile.out}">
      <fileset dir="${src.home}">
        <include name="**/antlib.xml"/>
      </fileset>
    </copy>

  </target>

  <!-- ==================================================================== -->

  <target name="doc" depends="build">

    <javadoc sourcepath="src"
        destdir="${doc.home}/api"
        packagenames="*"
        author="true"
        version="true"
        use="true"
        windowtitle="LShift - Java Library"
        bottom="Copyright (C) 2006 LShift Ltd."
        doctitle="LShift - Java Utilities">
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>

  <!-- ==================================================================== -->

  <target name="test" depends="build">
    <mkdir dir="${test.compile.out}"/>

    <javac
      srcdir="${test.src.home}"
      destdir="${test.compile.out}"
      debug="true"
      target="${javac.target}">

      <classpath>
        <path refid="test.compile.classpath"/>
        <pathelement path="${compile.out}"/>
      </classpath>
    </javac>

    <path id="test.classpath">
      <path refid="test.compile.classpath"/>
      <pathelement path="${compile.out}"/>
      <pathelement path="${test.compile.out}"/>
    </path>

    <junit fork="yes">
      <classpath refid="test.classpath"/>
      <formatter type="plain"/>
      <test todir="${build.home}" name="net.lshift.java.AllTest"/>
    </junit>

  </target>

  <target name="test-linker" depends="build">
    <taskdef name="linker" className="net.lshift.java.linker.Linker">
      <classpath>
        <pathelement path="${compile.out}"/>
      </classpath>
    </taskdef>

    <linker mainClass="foo" dest="build/linked.jar">
      <jars dir="dist" includes="*.jar"/>
    </linker>
  </target>

  <!-- ==================================================================== -->

  <target name="binary-dist" depends="build,test,doc">
    <mkdir dir="${dist.home}"/>

    <!-- build the template web-app into a war -->
    <jar destfile="${dist.home}/lshift-java.jar"
      basedir="${build.home}/classes"/>

    <copy todir="${dist.home}">
      <fileset dir=".">
        <include name="NOTICE"/>
        <include name="LICENSE"/>
        <include name="README"/>
        <include name="build.xml"/>
        <include name="sample.build.properties"/>
        <include name="doc/**/*"/>
      </fileset>
      <fileset dir="${build.home}">
        <include name="doc/**/*"/>
      </fileset>
    </copy>
  </target>

  <available file="UNLICENSED" property="unlicensed"/>

  <target if="unlicensed" name="unlicensed-src-dist">
    <copy todir="${dist.home}/src">
      <fileset dir="src" includes="**/*.java"/>
      <fileset dir="test" includes="**/*.java"/>
      <filterchain>
        <concatfilter prepend="NOTICE"/>
      </filterchain>
    </copy>
  </target>

  <target unless="unlicensed" name="licensed-src-dist">
    <copy todir="${dist.home}/src">
      <fileset dir="src" includes="**/*.java"/>
      <fileset dir="test" includes="**/*.java"/>
    </copy>
  </target>

  <target name="dist" depends="licensed-src-dist,unlicensed-src-dist,binary-dist"/>

  <!-- ==================================================================== -->

  <target name="install" depends="dist">
    <taskdef name="install" classname="net.lshift.cm.Install"
      classpath="${dist.home}/bin/use.jar"/>

    <install dist="${dist.home}"
      name="${cm.module}" vendor="${cm.vendor}" version="${cm.version}" />
  </target>

  <target name="publish">
    <cvs>
      <commandline>
        <argument value="tag"/>
        <argument value="${cm.version}"/>
      </commandline>
    </cvs>

    <cm:publish-modules>
      <moduleset>
        <module name="${cm.module}" vendor="${cm.vendor}" version="${cm.version}" />
      </moduleset>
    </cm:publish-modules>
  </target>

  <!-- ==================================================================== -->

  <target name="package" depends="dist">
    <tar compression="gzip" destfile="lshift-java-${public.version}.tar.gz">
      <tarfileset prefix="lshift-java-${public.version}/" dir="${dist.home}">
        <include name="**/*"/>
      </tarfileset>
    </tar>
  </target>

  <!-- ==================================================================== -->

  <target name="clean">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>

</project>